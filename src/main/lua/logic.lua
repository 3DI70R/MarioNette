---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Three.
--- DateTime: 10.05.2018 10:40
---

local neural = require("neural")

local logic = {}

local pendingNetworkList = {}
local networkEvaluationResults = {}
local network
local frameCounter = 0
local environment

function logic.addNetworks(networks)
    for i, n in pairs(networks) do
        table.insert(pendingNetworkList, n)
    end

    if network == nil then
        switchToNextNetwork()
    end
end

function logic.setEnvironment(env)
    environment = env
end

function switchToNextNetwork()
    if #pendingNetworkList > 0 then
        local networkDefinition = pendingNetworkList[1]
        table.remove(pendingNetworkList, 1)
        network = neural.createNetwork(networkDefinition)
        onEvaluationStarted()
    end
end

function storeEvaluationResult(result)
    table.insert(networkEvaluationResults, result)
end

function onEvaluationStarted()
    environment.onSimulationReset()
    frameCounter = 0
end

function onEvaluationFinished()
    onEvaluationStarted()
end

function logic.simulateFrame()

    if network then
        frameCounter = frameCounter + 1
        environment.onNewFrame(frameCounter)
        local state = environment.getEvaluationState(frameCounter)

        gui.text(16, 16, state.fitness)

        if state.isRunFinished then
            onEvaluationFinished(state)
        else
            local inputs = environment.getInputs()
            local outputs = network:evaluate(inputs)

            environment.mapOutputs(outputs)
        end
    end

    emu.frameadvance()

end

return logic
